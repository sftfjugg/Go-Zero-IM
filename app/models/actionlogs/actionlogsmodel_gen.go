// Code generated by goctl. DO NOT EDIT!

package actionlogs

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actionLogsFieldNames          = builder.RawFieldNames(&ActionLogs{})
	actionLogsRows                = strings.Join(actionLogsFieldNames, ",")
	actionLogsRowsExpectAutoSet   = strings.Join(stringx.Remove(actionLogsFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	actionLogsRowsWithPlaceHolder = strings.Join(stringx.Remove(actionLogsFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	actionLogsModel interface {
		Insert(ctx context.Context, data *ActionLogs) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ActionLogs, error)
		Update(ctx context.Context, data *ActionLogs) error
		Delete(ctx context.Context, id int64) error
	}

	defaultActionLogsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ActionLogs struct {
		Id           int64     `db:"id"`
		Tp           int64     `db:"type"`
		PubUserId    int64     `db:"pub_user_id"`
		SubUserId    int64     `db:"sub_user_id"`
		HandleResult string    `db:"handle_result"`
		CreateTime   time.Time `db:"create_time"`
		UpdateTime   time.Time `db:"update_time"`
		Status       int64     `db:"status"`
	}
)

func newActionLogsModel(conn sqlx.SqlConn) *defaultActionLogsModel {
	return &defaultActionLogsModel{
		conn:  conn,
		table: "`action_logs`",
	}
}

func (m *defaultActionLogsModel) Insert(ctx context.Context, data *ActionLogs) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, actionLogsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Tp, data.PubUserId, data.SubUserId, data.HandleResult, data.Status)
	return ret, err
}

func (m *defaultActionLogsModel) FindOne(ctx context.Context, id int64) (*ActionLogs, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", actionLogsRows, m.table)
	var resp ActionLogs
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActionLogsModel) Update(ctx context.Context, data *ActionLogs) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, actionLogsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Tp, data.PubUserId, data.SubUserId, data.HandleResult, data.Status, data.Id)
	return err
}

func (m *defaultActionLogsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultActionLogsModel) tableName() string {
	return m.table
}
