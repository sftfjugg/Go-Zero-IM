// Code generated by goctl. DO NOT EDIT!

package sendqueue

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sendQueuesFieldNames          = builder.RawFieldNames(&SendQueues{})
	sendQueuesRows                = strings.Join(sendQueuesFieldNames, ",")
	sendQueuesRowsExpectAutoSet   = strings.Join(stringx.Remove(sendQueuesFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	sendQueuesRowsWithPlaceHolder = strings.Join(stringx.Remove(sendQueuesFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	sendQueuesModel interface {
		Insert(ctx context.Context, data *SendQueues) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SendQueues, error)
		Update(ctx context.Context, data *SendQueues) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSendQueuesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SendQueues struct {
		Id         int64  `db:"id"`
		UserId     int64  `db:"user_id"`
		Message    string `db:"message"`
		SendUserId int64  `db:"send_user_id"`
	}
)

func newSendQueuesModel(conn sqlx.SqlConn) *defaultSendQueuesModel {
	return &defaultSendQueuesModel{
		conn:  conn,
		table: "`send_queues`",
	}
}

func (m *defaultSendQueuesModel) Insert(ctx context.Context, data *SendQueues) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, sendQueuesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Message, data.SendUserId)
	return ret, err
}

func (m *defaultSendQueuesModel) FindOne(ctx context.Context, id int64) (*SendQueues, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sendQueuesRows, m.table)
	var resp SendQueues
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSendQueuesModel) Update(ctx context.Context, data *SendQueues) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sendQueuesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Message, data.SendUserId, data.Id)
	return err
}

func (m *defaultSendQueuesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSendQueuesModel) tableName() string {
	return m.table
}
