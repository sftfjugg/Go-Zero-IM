// Code generated by goctl. DO NOT EDIT!

package groupusers

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupUsersFieldNames          = builder.RawFieldNames(&GroupUsers{})
	groupUsersRows                = strings.Join(groupUsersFieldNames, ",")
	groupUsersRowsExpectAutoSet   = strings.Join(stringx.Remove(groupUsersFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	groupUsersRowsWithPlaceHolder = strings.Join(stringx.Remove(groupUsersFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	groupUsersModel interface {
		Insert(ctx context.Context, data *GroupUsers) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GroupUsers, error)
		Update(ctx context.Context, data *GroupUsers) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGroupUsersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GroupUsers struct {
		Id         int64     `db:"id"`
		GroupId    int64     `db:"group_id"`
		UserId     int64     `db:"user_id"`
		ChannelId  string    `db:"channel_id"`
		IsManager  int64     `db:"is_manager"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newGroupUsersModel(conn sqlx.SqlConn) *defaultGroupUsersModel {
	return &defaultGroupUsersModel{
		conn:  conn,
		table: "`group_users`",
	}
}

func (m *defaultGroupUsersModel) Insert(ctx context.Context, data *GroupUsers) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, groupUsersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.GroupId, data.UserId, data.ChannelId, data.IsManager)
	return ret, err
}

func (m *defaultGroupUsersModel) FindOne(ctx context.Context, id int64) (*GroupUsers, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupUsersRows, m.table)
	var resp GroupUsers
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupUsersModel) Update(ctx context.Context, data *GroupUsers) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupUsersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.GroupId, data.UserId, data.ChannelId, data.IsManager, data.Id)
	return err
}

func (m *defaultGroupUsersModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGroupUsersModel) tableName() string {
	return m.table
}
