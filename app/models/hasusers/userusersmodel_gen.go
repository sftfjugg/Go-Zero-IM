// Code generated by goctl. DO NOT EDIT!

package hasusers

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userUsersFieldNames          = builder.RawFieldNames(&UserUsers{})
	userUsersRows                = strings.Join(userUsersFieldNames, ",")
	userUsersRowsExpectAutoSet   = strings.Join(stringx.Remove(userUsersFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	userUsersRowsWithPlaceHolder = strings.Join(stringx.Remove(userUsersFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	userUsersModel interface {
		Insert(ctx context.Context, data *UserUsers) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserUsers, error)
		Update(ctx context.Context, data *UserUsers) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserUsersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserUsers struct {
		Id        int64  `db:"id"`
		UserId    int64  `db:"user_id"`
		HasUserId int64  `db:"has_user_id"`
		ChannelId string `db:"channel_id"`
	}
)

func newUserUsersModel(conn sqlx.SqlConn) *defaultUserUsersModel {
	return &defaultUserUsersModel{
		conn:  conn,
		table: "`user_users`",
	}
}

func (m *defaultUserUsersModel) Insert(ctx context.Context, data *UserUsers) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userUsersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.HasUserId, data.ChannelId)
	return ret, err
}

func (m *defaultUserUsersModel) FindOne(ctx context.Context, id int64) (*UserUsers, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userUsersRows, m.table)
	var resp UserUsers
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserUsersModel) Update(ctx context.Context, data *UserUsers) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userUsersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.HasUserId, data.ChannelId, data.Id)
	return err
}

func (m *defaultUserUsersModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserUsersModel) tableName() string {
	return m.table
}
