// Code generated by goctl. DO NOT EDIT!

package notices

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	noticesFieldNames          = builder.RawFieldNames(&Notices{})
	noticesRows                = strings.Join(noticesFieldNames, ",")
	noticesRowsExpectAutoSet   = strings.Join(stringx.Remove(noticesFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	noticesRowsWithPlaceHolder = strings.Join(stringx.Remove(noticesFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	noticesModel interface {
		Insert(ctx context.Context, data *Notices) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Notices, error)
		Update(ctx context.Context, data *Notices) error
		Delete(ctx context.Context, id int64) error
	}

	defaultNoticesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Notices struct {
		Id         int64     `db:"id"`
		Tp         int64     `db:"type"`
		PubUserId  int64     `db:"pub_user_id"`
		SubUserId  int64     `db:"sub_user_id"`
		LinkId     int64     `db:"link_id"`
		Content    string    `db:"content"`
		Note       string    `db:"Note"`
		IsAgree    string    `db:"is_agree"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		Status     int64     `db:"status"`
	}
)

func newNoticesModel(conn sqlx.SqlConn) *defaultNoticesModel {
	return &defaultNoticesModel{
		conn:  conn,
		table: "`notices`",
	}
}

func (m *defaultNoticesModel) Insert(ctx context.Context, data *Notices) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, noticesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Tp, data.PubUserId, data.SubUserId, data.LinkId, data.Content, data.Note, data.IsAgree, data.Status)
	return ret, err
}

func (m *defaultNoticesModel) FindOne(ctx context.Context, id int64) (*Notices, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", noticesRows, m.table)
	var resp Notices
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNoticesModel) Update(ctx context.Context, data *Notices) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, noticesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Tp, data.PubUserId, data.SubUserId, data.LinkId, data.Content, data.Note, data.IsAgree, data.Status, data.Id)
	return err
}

func (m *defaultNoticesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultNoticesModel) tableName() string {
	return m.table
}
